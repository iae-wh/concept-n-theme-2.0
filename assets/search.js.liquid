$(document).ready(async function () {
    const sortManager = new SortManager('[data-open-sort]');
});

class CollectionRenderer {
    searchWrapper;
    searchSelector = '#search-container-wrapper';

    constructor() {
        this.searchWrapper = document.querySelector(this.searchSelector) || document.createElement('div');
    }

    async fetchToDom(url) {
        const response = await fetch(url);
        const data = await response.text();
        const parser = new DOMParser();
        return parser.parseFromString(data, 'text/html');
    }

    async showMoreProducts(url) {
        const newDocument = await this.fetchToDom(url);
        this.searchWrapper.insertAdjacentHTML('beforeend',
            newDocument.querySelector(this.searchSelector).innerHTML);
    }

    loading() {
        this.searchWrapper.style.opacity = 0.5;
        this.searchWrapper.style.pointerEvents = 'none';
    }

    finishLoading() {
        this.searchWrapper.style.opacity = 1;
        this.searchWrapper.style.pointerEvents = 'auto';
    }
}

class SortManager {
    sortOptions;
    activeIndex = -1;
    toggleButton;
    currentSort;
    optionSelector = '.collection-sort_option';

    constructor(selector) {
        this.sortOptions = Array.from(document.querySelectorAll(this.optionSelector));
        this.toggleButton = new ToggleButton(selector);
        this.delegate();
    }

    delegate() {
        this.sortOptions.forEach((option, index) => {
            option.onclick = (e) => {
                if (index === this.activeIndex) return;
                this.activeIndex = index;
                this.updateSortOption(index);
                this.toggleButton.deactive();
            };
        });
    }

    deactiveSort(index) {
        this.sortOptions[index].classList.remove('active');
    }

    activeSort(index) {
        const option = this.sortOptions[index];
        option.classList.add('active');
        this.applySort(option.dataset.sort);
    }

    updateSortOption(activeIndex) {
        this.sortOptions.forEach((option, index) => {
            if (activeIndex !== index) this.deactiveSort(index);
            else this.activeSort(index);
        });
    }

    applySort(sort) {
        this.currentSort = sort || '';
        let url = new URL(window.location.href.split('?')[0]);
        const params = new URLSearchParams(window.location.search);
        params.set('sort_by', sort);
        params.delete('page');
        url += `?${params.toString()}`;
        window.location.href = url;
    }
}

class ToggleButton {
    open = false;
    button;

    constructor(selector) {
        this.button = document.querySelector(selector) || document.createElement('button');
        this.button.dataset.open = this.open;
        this.delegate();
    }

    delegate() {
        this.button.onclick = (e) => {
            if (this.checkActive()) this.deactive();
            else this.active();
        };
    }

    checkActive() {
        return this.open;
    }

    deactive() {
        this.open = false;
        this.updateDataset();
    }

    active() {
        this.open = true;
        this.updateDataset();
    }

    updateDataset() {
        this.button.dataset.open = this.open;
    }
}

class ShowMoreButton extends HTMLButtonElement {
    constructor() {
        super();
        this.addEventListener('click', this.onclick);
    }

    connectedCallback() {
        this.currentHtml = this.innerHTML;
    }

    async onclick() {
        const nextPage = this.getCurrentPage() + 1;
        const params = new URLSearchParams(window.location.search);
        params.set('page', nextPage.toString());
        const url = `${window.location.pathname}?${params.toString()}`;
        window.history.replaceState({}, '', url);

        try {
            this.disable();
            await new CollectionRenderer().showMoreProducts(url);
            this.updateCurrentPage(nextPage);
            this.hidden(nextPage);
        } catch (e) {
            console.log(e);
        } finally {
            this.enable();
        }
    }

    disable() {
        this.setAttribute('disabled', 'disabled');
    }

    hidden(currentPage) {
        const maxPage = this.getAttribute('data-max-page');
        if(currentPage >= parseInt(maxPage)) {
            this.style.display = "none";
        }
    }

    enable() {
        this.removeAttribute('disabled');
    }

    getCurrentPage() {
        return parseInt(this.dataset.currentPage);
    }

    updateCurrentPage(currentPage) {
        this.dataset.currentPage = currentPage;
    }
}
customElements.define('show-more-button', ShowMoreButton, { extends: 'button' });

class SideModal extends HTMLElement {
    constructor() {
        super();
    }

    open() {
        this.dataset.open = true;
    }

    close() {
        this.dataset.open = false;
    }
}

class FilterModal extends SideModal {
    openButton;
    closeButton;
    outerBackground;
    submitButton;
    resetButton;
    form;

    constructor() {
        super();
    }

    connectedCallback() {
        setTimeout(() => {
            this.openButton = document.getElementById(this.dataset.openId);
            this.closeButton = this.querySelector('.filter-closer');
            this.outerBackground = this.querySelector('.filter-outer');
            this.form = this.querySelector('#filter-form');
            this.submitButton = this.querySelector('.filter-apply');
            this.resetButton = this.querySelector('.filter-reset');
            this.delegate();
        }, 200);
    }

    delegate() {
        this.openButton.addEventListener('click', () => {
            this.open();
        });

        this.closeButton.addEventListener('click', () => {
            this.close();
        });

        this.outerBackground.addEventListener('click', () => {
            this.close();
        });

        this.submitButton.addEventListener('click', () => {
            this.applyFilter();
        });

        this.resetButton.addEventListener('click', () => {
            const params = new URLSearchParams(window.location.search);
            this.resetFilterParams(params);
            window.location.search = params;
            this.close();
        });
    }

    applyFilter() {
        const params = new URLSearchParams(window.location.search);
        this.resetFilterParams(params);

        const formData = new FormData(this.form);
        for (const [key, value] of formData.entries()) {
            params.append(key, value);
        }

        window.location.search = params;
    }

    resetFilterParams(params) {
        const keys = [...params.keys()];
        for (const key of keys) {
            if(key !== 'sort_by' && key !== "type" && key !== 'q') {
                params.delete(key);
            }
        }
    }
}
customElements.define('filter-modal', FilterModal);
